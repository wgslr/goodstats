{"version":3,"sources":["logo.svg","utils.js","Timeline.js","backend.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","daysBetweenDates","earlier","later","Math","round","Column","bottom","books","book","this","push","startedAgo","Timeline","columns","datePoints","latestDay","sort","b1","b2","readAgo","forEach","b","col","find","c","addBook","includes","min","a","arrangeColumns","now","Date","map","duration","days","readAt","startedAt","preprocessBooks","console","log","className","dp","style","position","top","marginTop","lineHeight","idx","key","toString","bidx","title","width","height","maxHeight","SERVER","HttpException","code","codeText","listShelvedBooks","userId","maxItems","get","id","per_page","xmlDoc","parseReviewListResponse","reviews","getSingleXmlElement","parent","query","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","reviewsElement","documentElement","start","end","total","reviewsSnapshot","ORDERED_NODE_SNAPSHOT_TYPE","i","snapshotLength","review","snapshotItem","shelves","shelvesSnapshot","j","attributes","textContent","parseDate","string","split","monthStr","day","year","path","queryParams","url","URL","search","URLSearchParams","window","fetch","mehod","response","ok","status","statusText","text","body","doc","DOMParser","parseFromString","STATUS","setState","details","getBooksWithDates","loadTimestamp","error","filter","TitlesList","useState","setUserId","useEffect","loadBooks","slice","toLocaleDateString","length","type","value","onChange","e","target","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3a25111d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport function daysBetweenDates(earlier, later) {\n  // Take the difference between the dates and divide by milliseconds per day.\n  // Round to nearest whole number.\n  return Math.round((later - earlier) / (1000 * 60 * 60 * 24));\n}","\nimport React, { } from 'react';\nimport { daysBetweenDates } from './utils';\n\n\nconst UNITS_PER_DAY = 1.2;\nconst UNIT = 'em';\n\nclass Column {\n  bottom = 0; // earliest entry\n  books = [];\n\n  addBook(book) {\n    this.books.push(book);\n    this.bottom = book.startedAgo;\n  }\n}\n\nexport function Timeline({ books }) {\n  books = preprocessBooks(books);\n  const { columns, latestDay, datePoints } = arrangeColumns(books);\n  console.log({ columns, latestDay });\n  return (\n    <div className=\"timeline\">\n      <div className=\"timeAxis\">\n        {datePoints.map(dp =>\n          <div style={{\n            position: 'absolute',\n            top: `${(dp - latestDay) * UNITS_PER_DAY}${UNIT}`,\n            marginTop: `-0.5em`,\n            lineHeight: '1em',\n          }}>\n            {dp} days ago\n          </div>\n        )}\n      </div>\n\n      {\n        columns.map((col, idx) =>\n          <div className=\"column\" key={idx.toString()}>\n            {\n              col.books.map((b, bidx) =>\n\n                <div\n                  key={b.title}\n                  className=\"book\"\n                  style={{\n                    width: '100%',\n                    height: `${UNITS_PER_DAY * b.days}${UNIT}`,\n                    maxHeight: `${UNITS_PER_DAY * b.days}${UNIT}`,\n                    // margin: '1em',\n                    // marginTop: `${UNITS_PER_DAY * b.readAgo}px`\n                    marginTop: bidx === 0 ? `${(b.readAgo - latestDay) * UNITS_PER_DAY}${UNIT}` :\n                      `${((b.readAgo) - col.books[bidx - 1].startedAgo) * UNITS_PER_DAY}${UNIT}`,\n\n                  }}>\n                  {b.title}\n                </div>\n              )\n            }\n\n          </div>\n        )\n      }</div>\n  );\n}\n\n// calculates positions in days ago\n// using dates provided in books objects.\nfunction preprocessBooks(books) {\n  const now = new Date();\n  return books.map(b => ({\n    ...b,\n    duration: b.days,\n    readAgo: daysBetweenDates(b.readAt, now),\n    startedAgo: daysBetweenDates(b.startedAt, now),\n  }))\n}\n\n/**\n * Splits books into a minimum number of columns.\n */\nfunction arrangeColumns(books) {\n  const columns = [new Column()];\n  // points in time (in days ago) where a book is started or finished\n  const datePoints = [];\n  let latestDay = 99999;\n\n  books.sort((b1, b2) => {\n    if (b1.readAgo < b2.readAgo) return -1;\n    if (b1.readAgo > b2.readAgo) return 1;\n    if (b1.startedAgo < b2.startedAgo) return -1;\n    if (b1.startedAgo > b2.startedAgo) return 1;\n    return 0;\n  });\n\n\n  books.forEach(b => {\n    let col = columns.find(c => c.bottom <= b.readAgo);\n    if (!col) {\n      col = new Column();\n      columns.push(col);\n    }\n    col.addBook(b)\n    datePoints.includes(b.readAgo) || datePoints.push(b.readAgo);\n    datePoints.includes(b.startedAgo) || datePoints.push(b.startedAgo);\n    latestDay = Math.min(b.readAgo, latestDay);\n  });\n  datePoints.sort((a, b) => a - b)\n  return { columns, latestDay, datePoints };\n}\n\nexport default Timeline;","import {daysBetweenDates} from './utils';\n\nconst SERVER = 'goodstats.herokuapp.com'\n\nclass HttpException {\n  constructor(code, codeText) {\n    this.code = code;\n    this.codeText = codeText;\n  }\n\n  toString() {\n    return `Server returned ${this.code} ${this.codeText} response`;\n  }\n}\n\n/**\n * Lists the first page of \"reviewed\" (shelved) books.\n */\nexport async function listShelvedBooks(userId, maxItems = 30) {\n  const xmlDoc = await get('/review/list', { id: userId, per_page: maxItems, sort: 'date_read' });\n  const { reviews } = parseReviewListResponse(xmlDoc);\n\n  return reviews;\n}\n\n\nfunction getSingleXmlElement(xmlDoc, parent, query) {\n  return xmlDoc.evaluate(\n    query, parent, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null\n  ).singleNodeValue;\n}\n\n/**\n * Extracts interesting fields from the XML response.\n * @param Document xmlDoc\n */\nfunction parseReviewListResponse(xmlDoc) {\n  const reviewsElement = getSingleXmlElement(xmlDoc, xmlDoc.documentElement, 'reviews');\n  const { start, end, total } = reviewsElement; // extract paging information\n  const reviews = [];\n\n  const reviewsSnapshot = xmlDoc.evaluate('//reviews/review',\n    xmlDoc.documentElement, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null\n  );\n\n  for (let i = 0; i < reviewsSnapshot.snapshotLength; ++i) {\n    const review = reviewsSnapshot.snapshotItem(i);\n\n    const shelves = [];\n    const shelvesSnapshot = xmlDoc.evaluate('shelves/shelf',\n      review, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null\n    );\n\n    for (let j = 0; j < shelvesSnapshot.snapshotLength; ++j) {\n      shelves.push(shelvesSnapshot.snapshotItem(j).attributes['name'])\n    }\n\n    const started = getSingleXmlElement(xmlDoc, review, 'started_at').textContent;\n\n    let readAt = getSingleXmlElement(xmlDoc, review, 'read_at').textContent;\n    let startedAt = getSingleXmlElement(xmlDoc, review, 'started_at').textContent;\n    readAt = readAt ? parseDate(readAt) : null;\n    startedAt = startedAt ? parseDate(startedAt) : readAt;\n    let days = startedAt && readAt ? daysBetweenDates(startedAt, readAt) : null;\n\n    reviews.push({\n      shelves, startedAt, readAt, days,\n      title: getSingleXmlElement(xmlDoc, review, 'book/title').textContent,\n    })\n  }\n\n  return { start, end, total, reviews }\n}\n\n\n/**\n * Parses date in format used by the Goodreads API\n * e.g. Fri Jun 28 14:24:08 -0700 2019\n */\nfunction parseDate(string) {\n  const [, monthStr, day, , , year] = string.split(' ');\n  const month = {\n    'Jan': 0,\n    'Feb': 1,\n    'Mar': 2,\n    'Apr': 3,\n    'May': 4,\n    'Jun': 5,\n    'Jul': 6,\n    'Aug': 7,\n    'Sep': 8,\n    'Oct': 9,\n    'Nov': 10,\n    'Dec': 11,\n  }[monthStr];\n  return new Date(year, month, day);\n}\n\n\nasync function get(path, queryParams) {\n  const url = new URL(`https://${SERVER}/goodreads${path}`);\n  url.search = new URLSearchParams(queryParams).toString();\n  const response = await window.fetch(url, { mehod: 'GET', })\n  if (!response.ok) {\n    throw new HttpException(response.status, response.statusText);\n  }\n  const body = await response.text();\n  const doc = (new DOMParser()).parseFromString(body, 'application/xml');\n  return doc;\n}\n","import React, { useState, useEffect } from 'react';\nimport Timeline from './Timeline.js';\nimport logo from './logo.svg';\nimport { listShelvedBooks } from './backend.js'\nimport './App.css';\n\nconst DEFAULT_USER_ID = '29690543';\n\nconst STATUS = {\n  'LOADING': 'loading',\n  'LOADED': 'loaded',\n  'ERROR': 'error',\n}\n\nasync function loadBooks(userId, setState) {\n  try {\n    const books = await listShelvedBooks(userId, 100)\n    console.log(\"books\", books);\n    setState({\n      status: STATUS.LOADED,\n      details: { books: getBooksWithDates(books), loadTimestamp: new Date() }\n    })\n  } catch (error) {\n    setState({\n      status: STATUS.ERROR,\n      details: { error }\n    })\n  }\n}\n\n\nfunction getBooksWithDates(books) {\n  return books.filter(book =>\n    book.startedAt instanceof Date && book.readAt instanceof Date\n  )\n}\n\n\nfunction TitlesList() {\n  const [{ status, details }, setState] = useState({\n    status: STATUS.LOADING,\n    details: {},\n  });\n\n  const [userId, setUserId] = useState(DEFAULT_USER_ID);\n\n  // @TODO prevent overwriting newer data with a late older request\n  useEffect(() => {\n    setState({ status: STATUS.LOADING, details: {} });\n    loadBooks(userId, setState);\n  }, [userId]);\n\n  let body = '';\n  switch (status) {\n    case STATUS.LOADING:\n      body = 'Loading your books...'\n      break;\n    case STATUS.LOADED:\n      const { books, loadTimestamp } = details;\n      body =\n        <div>\n          <ul>\n            {books.slice(0, 5).map(({ title, days, startedAt, readAt }) =>\n              <li key={title}>\n                {title} (read in {days} days - from {startedAt.toLocaleDateString()} to {readAt.toLocaleDateString()})\n            </li>\n            )}\n            {books.length > 5 && <li>... and more</li>}\n          </ul>\n          Loaded at: {loadTimestamp.toString()}\n\n          <Timeline books={books}/>\n        </div>\n      break;\n    case STATUS.ERROR:\n      body = 'Loading books failed: ' + details.error;\n      break;\n  }\n\n  return (\n    <div>\n      <label>\n        User ID\n      <input type=\"text\" value={userId} onChange={e => setUserId(e.target.value)} />\n      </label>\n\n      <h1>Books you have read</h1>\n      {body}\n    </div>\n  );\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Goodstats</h1>\n      <p>This website uses your data from <a href=\"https//goodreads.com\">Goodreads</a> to display a history of reading.\n      No data is persisted on our servers.\n      </p>\n      <TitlesList />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}